// Copyright (c) 2025 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0 or MIT
//
//

extern crate alloc;
use alloc::{vec, vec::Vec};
use lazy_static::lazy_static;

use crate::error::{SpdmResult, SPDM_STATUS_FIPS_SELF_TEST_FAIL};
use ring::signature::RsaPublicKeyComponents;

use crate::crypto::asym_verify;
use crate::protocol::{SpdmBaseAsymAlgo, SpdmBaseHashAlgo, SpdmDer, SpdmSignatureStruct};

use crate::crypto::fips::cavs_vectors::ecdsa_p256_sha256_sig_ver;
use crate::crypto::fips::cavs_vectors::ecdsa_p256_sha384_sig_ver;
use crate::crypto::fips::cavs_vectors::ecdsa_p384_sha256_sig_ver;
use crate::crypto::fips::cavs_vectors::ecdsa_p384_sha384_sig_ver;
use crate::crypto::fips::cavs_vectors::rsa_sig_ver;

lazy_static! {
    static ref ecdsa_256_cert_template: Vec<u8> = vec![
        0x30, 0x82, 0x02, 0x08, 0x30, 0x82, 0x01, 0xaf, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01,
        0x03, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x30,
        0x31, 0x2e, 0x30, 0x2c, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x25, 0x44, 0x4d, 0x54, 0x46,
        0x20, 0x6c, 0x69, 0x62, 0x73, 0x70, 0x64, 0x6d, 0x20, 0x45, 0x43, 0x50, 0x32, 0x35, 0x36,
        0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x20, 0x63,
        0x65, 0x72, 0x74, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x33, 0x30, 0x39, 0x31, 0x32, 0x30, 0x37,
        0x31, 0x31, 0x31, 0x34, 0x5a, 0x17, 0x0d, 0x33, 0x33, 0x30, 0x39, 0x30, 0x39, 0x30, 0x37,
        0x31, 0x31, 0x31, 0x34, 0x5a, 0x30, 0x2d, 0x31, 0x2b, 0x30, 0x29, 0x06, 0x03, 0x55, 0x04,
        0x03, 0x0c, 0x22, 0x44, 0x4d, 0x54, 0x46, 0x20, 0x6c, 0x69, 0x62, 0x73, 0x70, 0x64, 0x6d,
        0x20, 0x45, 0x43, 0x50, 0x32, 0x35, 0x36, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
        0x65, 0x72, 0x20, 0x63, 0x65, 0x72, 0x74, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
        0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07,
        0x03, 0x42, 0x00, 0x04, 0x0d, 0xf4, 0x6e, 0x4d, 0x65, 0xfa, 0x52, 0xfe, 0xce, 0xb0, 0xbd,
        0xa0, 0x59, 0x40, 0x49, 0xa0, 0x7b, 0x8d, 0x67, 0xfc, 0x61, 0x91, 0xae, 0x7e, 0x7a, 0xa5,
        0x60, 0x93, 0x78, 0x97, 0xe2, 0xab, 0x42, 0x90, 0x28, 0xca, 0x3e, 0x72, 0x51, 0x1e, 0x6d,
        0xd7, 0x1b, 0xeb, 0x1a, 0x13, 0x11, 0xa5, 0x1d, 0x36, 0x4f, 0x27, 0xdf, 0x80, 0x66, 0x96,
        0x41, 0x73, 0xea, 0x51, 0xdd, 0x54, 0xf9, 0x95, 0xa3, 0x81, 0xbc, 0x30, 0x81, 0xb9, 0x30,
        0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0b,
        0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x05, 0xe0, 0x30, 0x1d, 0x06, 0x03,
        0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xc8, 0x58, 0x02, 0x82, 0xe6, 0xa1, 0x28, 0x16,
        0x5d, 0xde, 0x24, 0xc8, 0xa6, 0x52, 0xc5, 0xab, 0x54, 0x1c, 0xe0, 0x51, 0x30, 0x31, 0x06,
        0x03, 0x55, 0x1d, 0x11, 0x04, 0x2a, 0x30, 0x28, 0xa0, 0x26, 0x06, 0x0a, 0x2b, 0x06, 0x01,
        0x04, 0x01, 0x83, 0x1c, 0x82, 0x12, 0x01, 0xa0, 0x18, 0x0c, 0x16, 0x41, 0x43, 0x4d, 0x45,
        0x3a, 0x57, 0x49, 0x44, 0x47, 0x45, 0x54, 0x3a, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
        0x38, 0x39, 0x30, 0x30, 0x2a, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x20,
        0x30, 0x1e, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06, 0x08, 0x2b,
        0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07,
        0x03, 0x09, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x83, 0x1c, 0x82, 0x12,
        0x06, 0x04, 0x10, 0x30, 0x0e, 0x30, 0x0c, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x83,
        0x1c, 0x82, 0x12, 0x02, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03,
        0x02, 0x03, 0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x30, 0x90, 0x5c, 0x67, 0x6f, 0x63, 0x85,
        0x8a, 0x06, 0x1b, 0xac, 0xd6, 0x8c, 0xc3, 0xd7, 0xd5, 0x87, 0xc8, 0x36, 0x01, 0xa6, 0x4c,
        0x56, 0xc4, 0x8c, 0x0c, 0x46, 0x3e, 0xc1, 0xbb, 0x68, 0x9c, 0x02, 0x20, 0x08, 0x68, 0x02,
        0x1d, 0x06, 0x75, 0x4c, 0x99, 0x1c, 0x20, 0x96, 0x52, 0x14, 0x9d, 0xe4, 0xc5, 0x39, 0x88,
        0x9d, 0xb4, 0x29, 0xf7, 0x53, 0x6b, 0x41, 0x1f, 0x0d, 0x26, 0xef, 0x80, 0x4c, 0x49
    ];
    static ref ecdsa_384_cert_template: Vec<u8> = vec![
        0x30, 0x82, 0x02, 0x47, 0x30, 0x82, 0x01, 0xcc, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01,
        0x03, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x03, 0x30, 0x30,
        0x31, 0x2e, 0x30, 0x2c, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x25, 0x44, 0x4d, 0x54, 0x46,
        0x20, 0x6c, 0x69, 0x62, 0x73, 0x70, 0x64, 0x6d, 0x20, 0x45, 0x43, 0x50, 0x33, 0x38, 0x34,
        0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x20, 0x63,
        0x65, 0x72, 0x74, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x33, 0x30, 0x39, 0x31, 0x32, 0x30, 0x37,
        0x31, 0x31, 0x33, 0x33, 0x5a, 0x17, 0x0d, 0x33, 0x33, 0x30, 0x39, 0x30, 0x39, 0x30, 0x37,
        0x31, 0x31, 0x33, 0x33, 0x5a, 0x30, 0x2d, 0x31, 0x2b, 0x30, 0x29, 0x06, 0x03, 0x55, 0x04,
        0x03, 0x0c, 0x22, 0x44, 0x4d, 0x54, 0x46, 0x20, 0x6c, 0x69, 0x62, 0x73, 0x70, 0x64, 0x6d,
        0x20, 0x45, 0x43, 0x50, 0x33, 0x38, 0x34, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
        0x65, 0x72, 0x20, 0x63, 0x65, 0x72, 0x74, 0x30, 0x76, 0x30, 0x10, 0x06, 0x07, 0x2a, 0x86,
        0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x05, 0x2b, 0x81, 0x04, 0x00, 0x22, 0x03, 0x62, 0x00,
        0x04, 0x0d, 0x1c, 0xb9, 0x20, 0x1c, 0xdc, 0xed, 0xc8, 0x64, 0xe9, 0x70, 0xa3, 0x62, 0x12,
        0xda, 0xd4, 0xfe, 0x59, 0x94, 0xce, 0xbd, 0xae, 0xd7, 0xd2, 0x94, 0xe4, 0xe3, 0x11, 0x88,
        0x78, 0xb9, 0x88, 0xc0, 0xed, 0x5b, 0xe1, 0x41, 0x4a, 0xdf, 0x28, 0xdb, 0x49, 0x0f, 0x38,
        0x81, 0x52, 0x68, 0xb5, 0x4c, 0x6a, 0x11, 0x0b, 0x58, 0xb1, 0x9c, 0xc1, 0x4d, 0x47, 0x41,
        0x14, 0x1f, 0x6d, 0xd6, 0x57, 0xac, 0xa3, 0x9f, 0xd1, 0xb9, 0x64, 0xde, 0x07, 0x11, 0xe8,
        0x31, 0x78, 0xde, 0x75, 0x3a, 0xb7, 0x2c, 0x15, 0x56, 0xea, 0xf5, 0x20, 0x63, 0x93, 0x0f,
        0x33, 0xa9, 0x71, 0xa3, 0x7e, 0x78, 0x19, 0xa3, 0x81, 0xbc, 0x30, 0x81, 0xb9, 0x30, 0x0c,
        0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0b, 0x06,
        0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x05, 0xe0, 0x30, 0x1d, 0x06, 0x03, 0x55,
        0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x14, 0x3c, 0x4f, 0x66, 0xc7, 0xd7, 0x60, 0x40, 0x7f,
        0x67, 0xc1, 0x95, 0x68, 0xb3, 0x87, 0x28, 0x3e, 0xc5, 0x23, 0x83, 0x30, 0x31, 0x06, 0x03,
        0x55, 0x1d, 0x11, 0x04, 0x2a, 0x30, 0x28, 0xa0, 0x26, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04,
        0x01, 0x83, 0x1c, 0x82, 0x12, 0x01, 0xa0, 0x18, 0x0c, 0x16, 0x41, 0x43, 0x4d, 0x45, 0x3a,
        0x57, 0x49, 0x44, 0x47, 0x45, 0x54, 0x3a, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
        0x39, 0x30, 0x30, 0x2a, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x20, 0x30,
        0x1e, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06, 0x08, 0x2b, 0x06,
        0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03,
        0x09, 0x30, 0x1e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x83, 0x1c, 0x82, 0x12, 0x06,
        0x04, 0x10, 0x30, 0x0e, 0x30, 0x0c, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x83, 0x1c,
        0x82, 0x12, 0x02, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x03,
        0x03, 0x69, 0x00, 0x30, 0x66, 0x02, 0x31, 0x00, 0xaf, 0x75, 0x02, 0xa9, 0xb3, 0xa6, 0x47,
        0x4a, 0x6e, 0xf4, 0x0c, 0xb0, 0x85, 0x07, 0xfc, 0x3c, 0x53, 0x9d, 0x29, 0xb0, 0x09, 0xc2,
        0xb9, 0xb3, 0xf3, 0x96, 0xb9, 0x99, 0xbe, 0xc5, 0x75, 0x9c, 0xac, 0x4f, 0xc3, 0x8a, 0x7a,
        0x24, 0x7d, 0x17, 0xf7, 0xcb, 0x2a, 0x71, 0x14, 0x57, 0x3e, 0x92, 0x02, 0x31, 0x00, 0xd3,
        0x57, 0xaf, 0x94, 0x68, 0xe1, 0x02, 0xb6, 0x51, 0x50, 0x0c, 0x4a, 0x74, 0x97, 0x72, 0x37,
        0xb5, 0x03, 0xff, 0x58, 0x80, 0xe0, 0xf5, 0xeb, 0xae, 0x1e, 0x81, 0xd8, 0xd5, 0x84, 0x3d,
        0x18, 0x83, 0x60, 0xfe, 0x07, 0xcd, 0x43, 0x2d, 0x27, 0xbd, 0xf5, 0xa4, 0xa5, 0x19, 0x7f,
        0x5d, 0x09
    ];
}

#[allow(clippy::too_many_arguments)]
fn ecdsa_verify(
    asym_algo: SpdmBaseAsymAlgo,
    hash_algo: SpdmBaseHashAlgo,
    ecp_template: Vec<u8>,
    msg: &[u8],
    qx: &[u8],
    qy: &[u8],
    r: &[u8],
    s: &[u8],
) -> bool {
    let certificate = match asym_algo {
        SpdmBaseAsymAlgo::TPM_ALG_ECDSA_ECC_NIST_P256 => {
            let length = 32;
            let offset: usize = 180 + 4;
            let mut ecp_cert = ecp_template.clone();
            ecp_cert[offset..offset + length].copy_from_slice(qx);
            ecp_cert[offset + length..offset + 2 * length].copy_from_slice(qy);
            ecp_cert
        }
        SpdmBaseAsymAlgo::TPM_ALG_ECDSA_ECC_NIST_P384 => {
            let length = 48;
            let offset: usize = 177 + 4;
            let mut ecp_cert = ecp_template.clone();
            ecp_cert[offset..offset + length].copy_from_slice(qx);
            ecp_cert[offset + length..offset + 2 * length].copy_from_slice(qy);
            ecp_cert
        }
        _ => return false,
    };

    let mut sig = SpdmSignatureStruct::default();
    sig.data_size = (r.len() + s.len()) as u16;
    sig.data[0..r.len()].copy_from_slice(r);
    sig.data[r.len()..r.len() + s.len()].copy_from_slice(s);

    asym_verify::verify(
        hash_algo,
        asym_algo,
        SpdmDer::SpdmDerCertChain(cert_chain_data),
        msg,
        &sig,
    )
    .is_ok()
}

pub fn run_self_tests() -> SpdmResult {
    // RSA
    {
        let cavs_vectors = rsa_sig_ver::get_cavs_vectors();
        for cv in cavs_vectors.iter() {
            let public_key = RsaPublicKeyComponents { n: cv.n, e: cv.e };

            let params = match cv.hash {
                "SHA1" => &ring::signature::RSA_PKCS1_2048_8192_SHA1_FOR_LEGACY_USE_ONLY,
                "SHA256" => &ring::signature::RSA_PKCS1_2048_8192_SHA256,
                "SHA384" => &ring::signature::RSA_PKCS1_2048_8192_SHA384,
                "SHA512" => &ring::signature::RSA_PKCS1_2048_8192_SHA512,
                _ => continue,
            };

            let ret = public_key.verify(params, &cv.msg, &cv.sig);
            match (cv.res, ret.is_ok()) {
                // Expecting positive result but got an error
                ("P", false) |
                // Expecting negative result but got a success
                ("F", true) => return Err(SPDM_STATUS_FIPS_SELF_TEST_FAIL),
                // All other cases are ok
                _ => continue,
            }
        }
    }

    // ECDSA P-256, SHA-256
    {
        let cavs_vectors = ecdsa_p256_sha256_sig_ver::get_cavs_vectors();
        for cv in cavs_vectors.iter() {
            let ret = ecdsa_verify(
                SpdmBaseAsymAlgo::TPM_ALG_ECDSA_ECC_NIST_P256,
                SpdmBaseHashAlgo::TPM_ALG_SHA_256,
                ecdsa_256_cert_template.to_vec(),
                &cv.msg,
                &cv.qx,
                &cv.qy,
                &cv.r,
                &cv.s,
            );
            // Expecting positive result but got an error
            if cv.res == "P (0 )" {
                if !ret {
                    return Err(SPDM_STATUS_FIPS_SELF_TEST_FAIL);
                }
            // Expecting negative result but got a success
            } else if ret {
                return Err(SPDM_STATUS_FIPS_SELF_TEST_FAIL);
            }
        }
    }

    // ECDSA P-256, SHA-384
    {
        let cavs_vectors = ecdsa_p256_sha384_sig_ver::get_cavs_vectors();
        for cv in cavs_vectors.iter() {
            let ret = ecdsa_verify(
                SpdmBaseAsymAlgo::TPM_ALG_ECDSA_ECC_NIST_P256,
                SpdmBaseHashAlgo::TPM_ALG_SHA_384,
                ecdsa_256_cert_template.to_vec(),
                &cv.msg,
                &cv.qx,
                &cv.qy,
                &cv.r,
                &cv.s,
            );
            // Expecting positive result but got an error
            if cv.res == "P (0 )" {
                if !ret {
                    return Err(SPDM_STATUS_FIPS_SELF_TEST_FAIL);
                }
            // Expecting negative result but got a success
            } else if ret {
                return Err(SPDM_STATUS_FIPS_SELF_TEST_FAIL);
            }
        }
    }

    // ECDSA P-384, SHA-256
    {
        let cavs_vectors = ecdsa_p384_sha256_sig_ver::get_cavs_vectors();
        for cv in cavs_vectors.iter() {
            let ret = ecdsa_verify(
                SpdmBaseAsymAlgo::TPM_ALG_ECDSA_ECC_NIST_P384,
                SpdmBaseHashAlgo::TPM_ALG_SHA_256,
                ecdsa_384_cert_template.to_vec(),
                &cv.msg,
                &cv.qx,
                &cv.qy,
                &cv.r,
                &cv.s,
            );
            // Expecting positive result but got an error
            if cv.res == "P (0 )" {
                if !ret {
                    return Err(SPDM_STATUS_FIPS_SELF_TEST_FAIL);
                }
            // Expecting negative result but got a success
            } else if ret {
                return Err(SPDM_STATUS_FIPS_SELF_TEST_FAIL);
            }
        }
    }

    // ECDSA P-384, SHA-384
    {
        let cavs_vectors = ecdsa_p384_sha384_sig_ver::get_cavs_vectors();
        for cv in cavs_vectors.iter() {
            let ret = ecdsa_verify(
                SpdmBaseAsymAlgo::TPM_ALG_ECDSA_ECC_NIST_P384,
                SpdmBaseHashAlgo::TPM_ALG_SHA_384,
                ecdsa_384_cert_template.to_vec(),
                &cv.msg,
                &cv.qx,
                &cv.qy,
                &cv.r,
                &cv.s,
            );
            // Expecting positive result but got an error
            if cv.res == "P (0 )" {
                if !ret {
                    return Err(SPDM_STATUS_FIPS_SELF_TEST_FAIL);
                }
            // Expecting negative result but got a success
            } else if ret {
                return Err(SPDM_STATUS_FIPS_SELF_TEST_FAIL);
            }
        }
    }

    Ok(())
}
